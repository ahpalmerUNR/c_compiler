%{
	#include "symboltable.h"	

	FILE *out_log;
	FILE *outfile;
	FILE *errorText;
	char *logName = "compilerLog.txt";
	char *file_name;

	int levels[4];

	void outputReduction(const char *s);

	void yyerror(char const *msg);

	int yylex();

%}
%token AUTO_tok
%token BREAK_tok
%token CASE_tok
%token CHAR_tok
%token CONST_tok
%token CONTINUE_tok
%token DEFAULT_tok
%token DO_tok
%token DOUBLE_tok
%token ELSE_tok
%token ENUM_tok
%token EXTERN_tok
%token FLOAT_tok
%token FOR_tok
%token GOTO_tok
%token IF_tok
%token INT_tok
%token LONG_tok
%token REGISTER_tok
%token RETURN_tok
%token SHORT_tok
%token SIGNED_tok
%token SIZEOF_tok
%token STATIC_tok
%token STRUCT_tok
%token SWITCH_tok
%token TYPEDEF_tok
%token UNION_tok
%token UNSIGNED_tok
%token VOID_tok
%token VOLATILE_tok
%token WHILE_tok
%token ERROR_tok
%token ID_tok
%token PLUS_tok
%token MINUS_tok
%token STAR_tok
%token SEMI_tok
%token OPEN_BRACKET_tok
%token CLOSE_BRACKET_tok
%token EQUAL_tok
%token COLON_tok
%token COMMA_tok
%token OPEN_PAREN_tok
%token CLOSE_PAREN_tok
%token OPEN_BRACE_tok
%token CLOSE_BRACE_tok
%token QUESTION_MARK_tok
%token BAR_tok
%token CARET_tok
%token AMP_tok
%token GT_tok
%token LT_tok
%token PERCENT_tok
%token TILDA_tok
%token NOT_tok
%token INC_OP_tok
%token DEC_OP_tok
%token INTEGER_CONSTANT_tok
%token FLOATING_CONSTANT_tok

%token CHARACTER_CONSTANT_tok
%token ENUMERATION_CONSTANT_tok
%token STRING_LITERAL_tok

%token PTR_OP_tok
%token LEFT_OP_tok
%token RIGHT_OP_tok
%token LE_OP_tok
%token GE_OP_tok
%token EQ_OP_tok
%token NE_OP_tok
%token AND_OP_tok
%token OR_OP_tok
%token MULT_ASSIGN_tok
%token DIV_ASSIGN_tok
%token MOD_ASSIGN_tok
%token ADD_ASSIGN_tok
%token SUB_ASSIGN_tok
%token LEFT_ASSIGN_tok
%token RIGHT_ASSIGN_tok
%token AND_ASSIGN_tok
%token XOR_ASSIGN_tok
%token OR_ASSIGN_tok
%token TYPEDEF_NAME_tok
%token ELIPSIS_tok
%token DIV_tok
%token PERIOD_tok

%union
{
	int lint;
	char lchar;
	char* lstr;
	double ldoub;
	class Node* lnode;
}

%start translation_unit
%%

translation_unit
	: external_declaration {outputReduction("translation_unit : external_declaration");}
	| translation_unit external_declaration {outputReduction("translation_unit : translation_unit external_declaration");}
	;

external_declaration
	: function_definition {outputReduction("external_declaration : function_definition");}
	| declaration {outputReduction("external_declaration : declaration");}
	;

function_definition
	: declarator compound_statement {outputReduction("function_definition : declarator compound_statement");}
	| declarator declaration_list compound_statement {outputReduction("function_definition : declarator declaration_list compound_statement");}
	| declaration_specifiers declarator compound_statement {outputReduction("function_definition : declaration_specifiers declarator compound_statement");}
	| declaration_specifiers declarator declaration_list compound_statement {outputReduction("function_definition : declaration_specifiers declarator declaration_list compound_statement");}
	;

declaration
	: declaration_specifiers SEMI_tok {outputReduction("declaration : declaration_specifiers SEMI_tok");}
	| declaration_specifiers init_declarator_list SEMI_tok {outputReduction("declaration : declaration_specifiers init_declarator_list SEMI_tok");}

declaration_list
	: declaration {outputReduction("declaration_list : declaration");}
	| declaration_list declaration {outputReduction("declaration_list : declaration_list declaration");}
	;

declaration_specifiers
	: storage_class_specifier {outputReduction("declaration_specifiers : storage_class_specifier");}
	| storage_class_specifier declaration_specifiers {outputReduction("declaration_specifiers : storage_class_specifier declaration_specifiers");}
	| type_specifier {outputReduction("declaration_specifiers : type_specifier");}
	| type_specifier declaration_specifiers {outputReduction("declaration_specifiers : type_specifier declaration_specifiers");}
	| type_qualifier {outputReduction("declaration_specifiers : type_qualifier");}
	| type_qualifier declaration_specifiers {outputReduction("declaration_specifiers : type_qualifier declaration_specifiers");}
	;

storage_class_specifier
	: AUTO_tok {outputReduction("storage_class_specifier : AUTO_tok");}
	| REGISTER_tok {outputReduction("storage_class_specifier : REGISTER_tok");}
	| STATIC_tok {outputReduction("storage_class_specifier : STATIC_tok");}
	| EXTERN_tok {outputReduction("storage_class_specifier : EXTERN_tok");}
	| TYPEDEF_tok {outputReduction("storage_class_specifier : TYPEDEF_tok");}
	;

type_specifier
	: VOID_tok {outputReduction("type_specifier : VOID_tok");}
	| CHAR_tok {outputReduction("type_specifier : CHAR_tok");}
	| SHORT_tok {outputReduction("type_specifier : SHORT_tok");}
	| INT_tok {outputReduction("type_specifier : INT_tok");}
	| LONG_tok {outputReduction("type_specifier : LONG_tok");}
	| FLOAT_tok {outputReduction("type_specifier : FLOAT_tok");}
	| DOUBLE_tok {outputReduction("type_specifier : DOUBLE_tok");}
	| SIGNED_tok {outputReduction("type_specifier : SIGNED_tok");}
	| UNSIGNED_tok {outputReduction("type_specifier : UNSIGNED_tok");}
	| struct_or_union_specifier {outputReduction("type_specifier : struct_or_union_specifier");}
	| ENUM_tok {outputReduction("type_specifier : ENUM_tok");}
	| TYPEDEF_NAME_tok {outputReduction("type_specifier : TYPEDEF_NAME_tok");}
	;

type_qualifier
	: CONST_tok {outputReduction("type_qualifier : CONST_tok");}
	| VOLATILE_tok {outputReduction("type_qualifier : VOLATILE_tok");}
	;

struct_or_union_specifier
	: struct_or_union identifier OPEN_BRACE_tok struct_declaration_list CLOSE_BRACE_tok {outputReduction("struct_or_union_specifier : struct_or_union identifier OPEN_BRACE_tok struct_declaration_list CLOSE_BRACE_tok");}
	| struct_or_union OPEN_BRACE_tok struct_declaration_list CLOSE_BRACE_tok {outputReduction("struct_or_union_specifier : struct_or_union OPEN_BRACE_tok struct_declaration_list CLOSE_BRACE_tok");}
	| struct_or_union identifier {outputReduction("struct_or_union_specifier : struct_or_union identifier");}
	;

struct_or_union
	: STRUCT_tok {outputReduction("struct_or_union : STRUCT_tok");}
	| UNION_tok {outputReduction("struct_or_union : UNION_tok");}
	;

struct_declaration_list
	: struct_declaration {outputReduction("struct_declaration_list : struct_declaration");}
	| struct_declaration_list struct_declaration {outputReduction("struct_declaration_list : struct_declaration_list struct_declaration");}
	;

init_declarator_list
	: init_declarator {outputReduction("init_declarator_list : init_declarator");}
	| init_declarator_list COMMA_tok init_declarator {outputReduction("init_declarator_list : init_declarator_list COMMA_tok init_declarator");}
	;

init_declarator
	: declarator {outputReduction("init_declarator : declarator");}
	| declarator EQUAL_tok initializer {outputReduction("init_declarator : declarator EQUAL_tok initializer");}
	;

struct_declaration
	: specifier_qualifier_list struct_declarator_list SEMI_tok {outputReduction("struct_declaration : specifier_qualifier_list struct_declarator_list SEMI_tok");}
	;

specifier_qualifier_list
	: type_specifier {outputReduction("specifier_qualifier_list : type_specifier");}
	| type_specifier specifier_qualifier_list {outputReduction("specifier_qualifier_list : type_specifier specifier_qualifier_list");}
	| type_qualifier {outputReduction("specifier_qualifier_list : type_qualifier");}
	| type_qualifier specifier_qualifier_list {outputReduction("specifier_qualifier_list : type_qualifier specifier_qualifier_list");}
	;

struct_declarator_list
	: struct_declarator {outputReduction("struct_declarator_list : struct_declarator");}
	| struct_declarator_list COMMA_tok struct_declarator {outputReduction("struct_declarator_list : struct_declarator_list COMMA_tok struct_declarator");}
	;

struct_declarator
	: declarator {outputReduction("struct_declarator : declarator");}
	| COLON_tok constant_expression {outputReduction("struct_declarator : COLON_tok constant_expression");}
	| declarator COLON_tok constant_expression {outputReduction("struct_declarator : declarator COLON_tok constant_expression");}
	;

enum_specifier
	: ENUM_tok OPEN_BRACE_tok enumerator_list CLOSE_BRACE_tok {outputReduction("enum_specifier : ENUM_tok OPEN_BRACE_tok enumerator_list CLOSE_BRACE_tok");}
	| ENUM_tok identifier OPEN_BRACE_tok enumerator_list CLOSE_BRACE_tok {outputReduction("enum_specifier : ENUM_tok identifier OPEN_BRACE_tok enumerator_list CLOSE_BRACE_tok");}
	| ENUM_tok identifier {outputReduction("enum_specifier : ENUM_tok identifier");}
	;

enumerator_list
	: enumerator {outputReduction("enumerator_list : enumerator");}
	| enumerator_list COMMA_tok enumerator {outputReduction("enumerator_list : enumerator_list COMMA_tok enumerator");}
	;

enumerator
	: identifier {outputReduction("enumerator : identifier");}
	| identifier EQUAL_tok constant_expression {outputReduction("enumerator : identifier EQUAL_tok constant_expression");}
	;

declarator
	: direct_declarator {outputReduction("declarator : direct_declarator");}
	| pointer direct_declarator {outputReduction("declarator :  pointer direct_declarator");}
	;

direct_declarator
	: identifier {outputReduction("direct_declarator : identifier");}
	| OPEN_PAREN_tok declarator CLOSE_PAREN_tok {outputReduction("direct_declarator : OPEN_PAREN_tok declarator CLOSE_PAREN_tok");}
	| direct_declarator OPEN_BRACKET_tok CLOSE_BRACKET_tok {outputReduction("direct_declarator : direct_declarator OPEN_BRACKET_tok CLOSE_BRACKET_tok");}
	| direct_declarator OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok {outputReduction("direct_declarator : direct_declarator OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok");}
	| direct_declarator OPEN_PAREN_tok CLOSE_PAREN_tok {outputReduction("direct_declarator : direct_declarator OPEN_PAREN_tok CLOSE_PAREN_tok");}
	| direct_declarator OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok {outputReduction("direct_declarator : direct_declarator OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok");}
	| direct_declarator OPEN_PAREN_tok identifier_list CLOSE_PAREN_tok {outputReduction("direct_declarator : direct_declarator OPEN_PAREN_tok identifier_list CLOSE_PAREN_tok");}
	;

pointer
	: STAR_tok {outputReduction("pointer : STAR_tok");}
	| STAR_tok type_qualifier_list {outputReduction("pointer : STAR_tok type_qualifier_list");}
	| STAR_tok pointer {outputReduction("pointer : STAR_tok pointer");}
	| STAR_tok type_qualifier_list pointer {outputReduction("pointer : STAR_tok type_qualifier_list pointer");}
	;

type_qualifier_list
	: type_qualifier {outputReduction("type_qualifier_list : type_qualifier");}
	| type_qualifier_list type_qualifier {outputReduction("type_qualifier_list : type_qualifier_list type_qualifier");}
	;

parameter_type_list
	: parameter_list {outputReduction("parameter_type_list : parameter_list");}
	| parameter_list COMMA_tok ELIPSIS_tok {outputReduction("parameter_type_list : parameter_list COMMA_tok ELIPSIS_tok");}
	;

parameter_list
	: parameter_declaration {outputReduction("parameter_list : parameter_declaration");}
	| parameter_list COMMA_tok parameter_declaration {outputReduction("parameter_list : parameter_list COMMA_tok parameter_declaration");}
	;

parameter_declaration
	: declaration_specifiers declarator {outputReduction("parameter_declaration : declaration_specifiers declarator");}
	| declaration_specifiers {outputReduction("parameter_declaration : declaration_specifiers");}
	| declaration_specifiers abstract_declarator {outputReduction("parameter_declaration : declaration_specifiers abstract_declarator");}
	;

identifier_list
	: identifier {outputReduction("identifier_list : identifier");}
	| identifier_list COMMA_tok identifier {outputReduction("identifier_list : identifier_list COMMA_tok identifier");}
	;

initializer
	: assignment_expression {outputReduction("initializer : assignment_expression");}
	| OPEN_BRACE_tok initializer_list CLOSE_BRACE_tok {outputReduction("initializer : OPEN_BRACE_tok initializer_list CLOSE_BRACE_tok");}
	| OPEN_BRACE_tok initializer_list COMMA_tok CLOSE_BRACE_tok {outputReduction("initializer : OPEN_BRACE_tok initializer_list COMMA_tok CLOSE_BRACE_tok");}
	;

initializer_list
	: initializer {outputReduction("initializer_list : initializer");}
	| initializer_list COMMA_tok initializer {outputReduction("initializer_list : initializer_list COMMA_tok initializer");}
	;

type_name
	: specifier_qualifier_list {outputReduction("type_name : specifier_qualifier_list");}
	| specifier_qualifier_list abstract_declarator {outputReduction("type_name : specifier_qualifier_list abstract_declarator");}
	;

abstract_declarator
	: pointer {outputReduction("abstract_declarator : pointer");}
	| direct_abstract_declarator {outputReduction("abstract_declarator : direct_abstract_declarator");}
	| pointer direct_abstract_declarator {outputReduction("abstract_declarator : pointer direct_abstract_declarator");}
	;

direct_abstract_declarator
	: OPEN_PAREN_tok abstract_declarator CLOSE_PAREN_tok {outputReduction("direct_abstract_declarator : OPEN_PAREN_tok abstract_declarator CLOSE_PAREN_tok");}
	| OPEN_BRACKET_tok CLOSE_BRACKET_tok {outputReduction("direct_abstract_declarator : OPEN_BRACKET_tok CLOSE_BRACKET_tok");}
	| OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok {outputReduction("direct_abstract_declarator : OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok");}
	| direct_abstract_declarator OPEN_BRACKET_tok CLOSE_BRACKET_tok {outputReduction("direct_abstract_declarator : direct_abstract_declarator OPEN_BRACKET_tok CLOSE_BRACKET_tok");}
	| direct_abstract_declarator OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok {outputReduction("direct_abstract_declarator : direct_abstract_declarator OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok");}
	| OPEN_PAREN_tok CLOSE_PAREN_tok {outputReduction("direct_abstract_declarator : OPEN_PAREN_tok CLOSE_PAREN_tok");}
	| OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok {outputReduction("direct_abstract_declarator : OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok");}
	| direct_abstract_declarator OPEN_PAREN_tok CLOSE_PAREN_tok {outputReduction("direct_abstract_declarator : direct_abstract_declarator OPEN_PAREN_tok CLOSE_PAREN_tok");}
	| direct_abstract_declarator OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok {outputReduction("direct_abstract_declarator : direct_abstract_declarator OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok");}
	;

statement
	: labeled_statement {outputReduction("statement : labeled_statement");}
	| compound_statement {outputReduction("statement : compound_statement");}
	| expression_statement {outputReduction("statement : expression_statement");}
	| selection_statement {outputReduction("statement : selection_statement");}
	| iteration_statement {outputReduction("statement : iteration_statement");}
	| jump_statement {outputReduction("statement : jump_statement");}
	;

labeled_statement
	: identifier COLON_tok statement {outputReduction("labeled_statement : identifier COLON_tok statement");}
	| CASE_tok constant_expression COLON_tok statement {outputReduction("labeled_statement : CASE_tok constant_expression COLON_tok statement");}
	| DEFAULT_tok COLON_tok statement {outputReduction("labeled_statement : DEFAULT_tok COLON_tok statement");}
	;

expression_statement
	: SEMI_tok {outputReduction("expression_statement : SEMI_tok");}
	| expression SEMI_tok {outputReduction("expression_statement : expression SEMI_tok");}
	;

compound_statement
	: OPEN_BRACE_tok CLOSE_BRACE_tok {outputReduction("compound_statement : OPEN_BRACE_tok CLOSE_BRACE_tok");}
	| OPEN_BRACE_tok statement_list CLOSE_BRACE_tok {outputReduction("compound_statement : OPEN_BRACE_tok statement_list CLOSE_BRACE_tok");}
	| OPEN_BRACE_tok declaration_list CLOSE_BRACE_tok {outputReduction("compound_statement : OPEN_BRACE_tok declaration_list CLOSE_BRACE_tok");}
	| OPEN_BRACE_tok declaration_list statement_list CLOSE_BRACE_tok {outputReduction("compound_statement : OPEN_BRACE_tok declaration_list statement_list CLOSE_BRACE_tok");}
	;

statement_list
	: statement {outputReduction("statement_list : statement");}
	| statement_list statement {outputReduction("statement_list : statement_list statement");}
	;

selection_statement
	: IF_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement {outputReduction("selection_statement : IF_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement");}
	| IF_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement ELSE_tok statement {outputReduction("selection_statement : IF_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement ELSE_tok statement");}
	| SWITCH_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement {outputReduction("selection_statement : SWITCH_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement");}
	;

iteration_statement
	: WHILE_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement {outputReduction("iteration_statement : WHILE_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement");}
	| DO_tok statement WHILE_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok SEMI_tok {outputReduction("iteration_statement : DO_tok statement WHILE_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok SEMI_tok");}
	| FOR_tok OPEN_PAREN_tok SEMI_tok SEMI_tok CLOSE_PAREN_tok statement {outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok SEMI_tok SEMI_tok CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok SEMI_tok SEMI_tok expression CLOSE_PAREN_tok statement {outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok SEMI_tok SEMI_tok expression CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok SEMI_tok expression SEMI_tok CLOSE_PAREN_tok statement {outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok SEMI_tok expression SEMI_tok CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok SEMI_tok expression SEMI_tok expression CLOSE_PAREN_tok statement {outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok SEMI_tok expression SEMI_tok expression CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok expression SEMI_tok SEMI_tok CLOSE_PAREN_tok statement {outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok expression SEMI_tok SEMI_tok CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok expression SEMI_tok SEMI_tok expression CLOSE_PAREN_tok statement {outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok expression SEMI_tok SEMI_tok expression CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok expression SEMI_tok expression SEMI_tok CLOSE_PAREN_tok statement {outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok expression SEMI_tok expression SEMI_tok CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok expression SEMI_tok expression SEMI_tok expression CLOSE_PAREN_tok statement {outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok expression SEMI_tok expression SEMI_tok expression CLOSE_PAREN_tok statement");}
	;

jump_statement
	: GOTO_tok identifier SEMI_tok {outputReduction("jump_statement : GOTO_tok identifier SEMI_tok");}
	| CONTINUE_tok SEMI_tok {outputReduction("jump_statement : CONTINUE_tok SEMI_tok");}
	| BREAK_tok SEMI_tok {outputReduction("jump_statement : BREAK_tok SEMI_tok");}
	| RETURN_tok SEMI_tok {outputReduction("jump_statement : RETURN_tok SEMI_tok");}
	| RETURN_tok expression SEMI_tok {outputReduction("jump_statement : RETURN_tok expression SEMI_tok");}
	;

expression
	: assignment_expression {outputReduction("expression : assignment_expression");}
	| expression COMMA_tok assignment_expression {outputReduction("expression : expression COMMA_tok assignment_expression");}
	;

assignment_expression
	: conditional_expression {outputReduction("assignment_expression : conditional_expression");}
	| unary_expression assignment_operator assignment_expression {outputReduction("assignment_expression : unary_expression assignment_operator assignment_expression");}
	;

assignment_operator
	: EQUAL_tok {outputReduction("assignment_operator : EQUAL_tok");}
	| MULT_ASSIGN_tok {outputReduction("assignment_operator : MULT_ASSIGN_tok");}
	| DIV_ASSIGN_tok {outputReduction("assignment_operator : DIV_ASSIGN_tok");}
	| MOD_ASSIGN_tok {outputReduction("assignment_operator : MOD_ASSIGN_tok");}
	| ADD_ASSIGN_tok {outputReduction("assignment_operator : ADD_ASSIGN_tok ");}
	| SUB_ASSIGN_tok {outputReduction("assignment_operator : SUB_ASSIGN_tok");}
	| LEFT_ASSIGN_tok {outputReduction("assignment_operator : LEFT_ASSIGN_tok");}
	| RIGHT_ASSIGN_tok {outputReduction("assignment_operator : RIGHT_ASSIGN_tok");}
	| AND_ASSIGN_tok {outputReduction("assignment_operator : AND_ASSIGN_tok");}
	| XOR_ASSIGN_tok {outputReduction("assignment_operator : XOR_ASSIGN_tok");}
	| OR_ASSIGN_tok {outputReduction("assignment_operator : OR_ASSIGN_tok");}
	;

conditional_expression
	: logical_or_expression {outputReduction("conditional_expression : logical_or_expression");}
	| logical_or_expression QUESTION_MARK_tok expression COLON_tok conditional_expression {outputReduction("conditional_expression : logical_or_expression QUESTION_MARK_tok expression COLON_tok conditional_expression");}
	;

constant_expression
	: conditional_expression {outputReduction("constant_expression : conditional_expression");}
	;

logical_or_expression
	: logical_and_expression {outputReduction("logical_or_expression : logical_and_expression");}
	| logical_or_expression OR_OP_tok logical_and_expression {outputReduction("logical_or_expression : logical_or_expression OR_OP_tok logical_and_expression");}
	;

logical_and_expression
	: inclusive_or_expression {outputReduction("logical_and_expression : inclusive_or_expression");}
	| logical_and_expression AND_OP_tok inclusive_or_expression {outputReduction("logical_and_expression : logical_and_expression AND_OP_tok inclusive_or_expression");}
	;

inclusive_or_expression
	: exclusive_or_expression {outputReduction("inclusive_or_expression : exclusive_or_expression");}
	| inclusive_or_expression BAR_tok exclusive_or_expression {outputReduction("inclusive_or_expression : inclusive_or_expression BAR_tok exclusive_or_expression");}
	;

exclusive_or_expression
	: and_expression {outputReduction("exclusive_or_expression : and_expression ");}
	| exclusive_or_expression CARET_tok and_expression {outputReduction("exclusive_or_expression : exclusive_or_expression CARET_tok and_expression");}
	;

and_expression
	: equality_expression {outputReduction("and_expression : equality_expression");}
	| and_expression AMP_tok equality_expression {outputReduction("and_expression : and_expression AMP_tok equality_expression");}
	;

equality_expression
	: relational_expression {outputReduction("equality_expression : relational_expression");}
	| equality_expression EQ_OP_tok relational_expression {outputReduction("equality_expression : equality_expression EQ_OP_tok relational_expression");}
	| equality_expression NE_OP_tok relational_expression {outputReduction("equality_expression : equality_expression NE_OP_tok relational_expression");}
	;

relational_expression
	: shift_expression {outputReduction("relational_expression : shift_expression");}
	| relational_expression LT_tok shift_expression {outputReduction("relational_expression : relational_expression LT_tok shift_expression");}
	| relational_expression GT_tok shift_expression {outputReduction("relational_expression : relational_expression GT_tok shift_expression");}
	| relational_expression LE_OP_tok shift_expression {outputReduction("relational_expression : relational_expression LE_OP_tok shift_expression");}
	| relational_expression GE_OP_tok shift_expression {outputReduction("relational_expression : relational_expression GE_OP_tok shift_expression");}
	;

shift_expression
	: additive_expression {outputReduction("shift_expression : additive_expression");}
	| shift_expression LEFT_OP_tok additive_expression {outputReduction("shift_expression : shift_expression LEFT_OP_tok additive_expression");}
	| shift_expression RIGHT_OP_tok additive_expression {outputReduction("shift_expression : shift_expression RIGHT_OP_tok additive_expression");}
	;

additive_expression
	: multiplicative_expression {outputReduction("additive_expression : multiplicative_expression");}
	| additive_expression PLUS_tok multiplicative_expression {outputReduction("additive_expression : additive_expression PLUS_tok multiplicative_expression");}
	| additive_expression MINUS_tok multiplicative_expression {outputReduction("additive_expression : additive_expression MINUS_tok multiplicative_expression");}
	;

multiplicative_expression
	: cast_expression {outputReduction("multiplicative_expression : cast_expression");}
	| multiplicative_expression STAR_tok cast_expression {outputReduction("multiplicative_expression : multiplicative_expression STAR_tok cast_expression");}
	| multiplicative_expression DIV_tok cast_expression {outputReduction("multiplicative_expression : multiplicative_expression DIV_tok cast_expression");}
	| multiplicative_expression PERCENT_tok cast_expression {outputReduction("multiplicative_expression : multiplicative_expression PERCENT_tok cast_expression");}
	;

cast_expression
	: unary_expression {outputReduction("");}
	| OPEN_PAREN_tok type_name CLOSE_PAREN_tok cast_expression {outputReduction("");}
	;

unary_expression
	: postfix_expression {outputReduction("unary_expression : postfix_expression");}
	| INC_OP_tok unary_expression {outputReduction("unary_expression : INC_OP_tok unary_expression");}
	| DEC_OP_tok unary_expression {outputReduction("unary_expression : DEC_OP_tok unary_expression");}
	| unary_operator cast_expression {outputReduction("unary_expression : unary_operator cast_expression");}
	| SIZEOF_tok unary_expression {outputReduction("unary_expression : SIZEOF_tok unary_expression");}
	| SIZEOF_tok OPEN_PAREN_tok type_name CLOSE_PAREN_tok {outputReduction("unary_expression : SIZEOF_tok OPEN_PAREN_tok type_name CLOSE_PAREN_tok");}
	;

unary_operator
	: AMP_tok {outputReduction("unary_operator : AMP_tok");}
	| STAR_tok {outputReduction("unary_operator : STAR_tok");}
	| PLUS_tok {outputReduction("unary_operator : PLUS_tok");}
	| MINUS_tok {outputReduction("unary_operator : MINUS_tok");}
	| TILDA_tok {outputReduction("unary_operator : TILDA_tok");}
	| NOT_tok {outputReduction("unary_operator : NOT_tok");}
	;

postfix_expression
	: primary_expression {outputReduction("postfix_expression : ");}
	| postfix_expression OPEN_BRACKET_tok expression CLOSE_BRACKET_tok {outputReduction("postfix_expression : postfix_expression OPEN_BRACKET_tok expression CLOSE_BRACKET_tok");}
	| postfix_expression OPEN_PAREN_tok CLOSE_PAREN_tok {outputReduction("postfix_expression : postfix_expression OPEN_PAREN_tok CLOSE_PAREN_tok");}
	| postfix_expression OPEN_PAREN_tok argument_expression_list CLOSE_PAREN_tok {outputReduction("postfix_expression : postfix_expression OPEN_PAREN_tok argument_expression_list CLOSE_PAREN_tok");}
	| postfix_expression PERIOD_tok identifier {outputReduction("postfix_expression : postfix_expression PERIOD_tok identifier");}
	| postfix_expression PTR_OP_tok identifier {outputReduction("postfix_expression : postfix_expression PTR_OP_tok identifier");}
	| postfix_expression INC_OP_tok {outputReduction("postfix_expression : postfix_expression INC_OP_tok");}
	| postfix_expression DEC_OP_tok {outputReduction("postfix_expression : postfix_expression DEC_OP_tok");}
	;

primary_expression
	: identifier {outputReduction("primary_expression : identifier");}
	| constant {outputReduction("primary_expression : constant");}
	| string {outputReduction("primary_expression : string");}
	| OPEN_PAREN_tok expression CLOSE_PAREN_tok {outputReduction("primary_expression : OPEN_PAREN_tok expression CLOSE_PAREN_tok");}
	;

argument_expression_list
	: assignment_expression {outputReduction("argument_expression_list : assignment_expression");}
	| argument_expression_list COMMA_tok assignment_expression {outputReduction("argument_expression_list : argument_expression_list COMMA_tok assignment_expression");}
	;

constant
	: INTEGER_CONSTANT_tok {outputReduction("constant : INTEGER_CONSTANT_tok");}
	| CHARACTER_CONSTANT_tok {outputReduction("constant : CHARACTER_CONSTANT_tok");}
	| FLOATING_CONSTANT_tok {outputReduction("constant : FLOATING_CONSTANT_tok");}
	| ENUMERATION_CONSTANT_tok {outputReduction("constant : ENUMERATION_CONSTANT_tok");}
	;

string
	: STRING_LITERAL_tok {outputReduction("string : STRING_LITERAL_tok");}
	;

identifier
	: ID_tok {outputReduction("identifier : ID_tok");}
	;
%%

#include <stdio.h>
//#include "symboltable.h"
int lex_debug_level;
int symbol_table_debug;
int yacc_debug_level;
int c_line_lex_debug_level;
int c_line_symbol_table_debug;
int c_line_yacc_debug_level;
int insert_lookup;
SymbolTable s;
//logName = "compilerLog.txt";

extern char yytext[];
extern int column;
extern int line;
extern FILE* yyin;


int main(int argc, char **argv)
{
	printf("Entered Main\n");
	int scan_count = 0;
	int lex_count = 0;
	int yacc_count = 0;
	
	lex_debug_level=1;
	symbol_table_debug=1;
	yacc_debug_level=1;
	c_line_symbol_table_debug =1;
	c_line_lex_debug_level=1;
	c_line_yacc_debug_level=1;
	
	
	levels[0] = 2;
	levels[1] = 3;
	levels[2] = 5;
	levels[3] = 7;
	
	outfile = fopen("out.s","w");
	out_log = fopen(logName,"a");
	
	printf("Created Log file\n");
	if(argc==1)
	{
		printf("No File Provided. Pass file in command line.");
	}
	else
	{
		if(!(yyin=fopen(argv[argc-1],"r")))
		{
			perror(argv[argc-1]);
			return(1);
		}
		file_name=argv[argc-1];
		errorText = fopen(argv[argc-1],"r");
		for(int i=argc-1; i>=1; i--)
		{
			if(argv[i][0]=='-' && argv[i][1]=='o')
			{
				fclose(outfile);
				printf("%s\n",argv[i+1]);
				outfile = fopen(argv[i+1],"w");
			}
			
			if(argv[i][0]=='-' && argv[i][1]=='l')
			{
				fclose(out_log);
				out_log = fopen(argv[i+1],"a");
				logName = argv[i+1];
			}
			if(argv[i][0]=='-' && argv[i][1]=='d')
			{
				for(int p = 2;argv[i][p]!='\0';p++)
				{
					switch(argv[i][p])
					{
						case 'l':
							lex_count+=1;
							if(lex_count <= 4)
							{
								c_line_lex_debug_level *= levels[lex_count-1];
							}
							break;
						case 's':
							scan_count+=1;
							if(scan_count <= 4)
							{
								c_line_symbol_table_debug *= levels[scan_count-1];
							}
							break;
						case 'y':
							yacc_count+=1;
							if(yacc_count <= 4)
							{
								c_line_yacc_debug_level*=levels[yacc_count-1];
							}
							break;
					}
				}
				//printf("Lex Count: %d, Scan Count: %d\n",lex_count,scan_count);
				printf("Lex Debug level: %d\nYacc Debug level: %d\nScanner Debug level: %d\n",c_line_lex_debug_level,c_line_yacc_debug_level,c_line_symbol_table_debug);
				
				lex_debug_level = c_line_lex_debug_level;
				printf("Debug lex level %d\n",lex_debug_level);
				symbol_table_debug = c_line_symbol_table_debug;
				printf("Debug symbol_table level %d\n",symbol_table_debug);
				yacc_debug_level = c_line_yacc_debug_level;
				printf("Debug yacc level %d\n",yacc_debug_level);
			}
			
			
		}
	}
	//int tok;
	
	printf("Set commandline args\n");

	
	//printf("%d\n",lex_debug_level);
	

	//s.insert("KEY",Data);
	//s.pushEmptyBST();
	//s.popBST();
	//s.searchTop("KEY");//returns pointer to node
	//s.searchAll("KEY");//returns pointer
	//s.writeToFile();//dumps table to file
	//lex_debug_level = 1;
	//symbol_table_debug = 1;
	//yacc_debug_level = 1;
	yyparse();
	//while((tok = yylex()))
	//{
	
		//printf("%d\n",tok);
	//}
	fclose(out_log);
	fclose(outfile);
	fclose(errorText);
	return 0;	
}

//int main(int argc, char **argv)
//{
//	if(argc >=2)
//	{
//		if (atoi(argv[1])>=1){
//			yydebug = atoi(argv[1]);
//			printf("Debug level set %d\n",yydebug);
//		}
//	}
//	
//	yyparse();
//	return 0;
//}

void yyerror(char const *msg)
{
	fprintf(stderr,"%s\n",msg);
}

void outputReduction(const char *s)
{	
	//fprintf(out_log, "%s", s);
}
