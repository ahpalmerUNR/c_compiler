%{
	#include <time.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <memory>
	#include "../src/symboltable.h"	
	#include "../src/tree/tree.h"
	#include "../src/tree/labelNode.h"
	#include "../src/tree/emptyNode.h"
	#include "../src/tree/iteration_statement.h"
	#include "../src/tree/dataNode.h"
	#include "../src/tree/jumpNode.h"
	#include "../src/tree/selectionNode.h"

	#define MAX_LINE_LENGTH 500
	FILE *out_log;
	FILE *outfile;
	FILE *errorText;
	FILE * tokenFile;
	FILE * parseFile;
	//FILE * productionFile;
	int insert_lookup;//1 lookup 0 insert
	char *logName = (char*)"testCases/compilerLog.txt";
	char *file_name;
	time_t time_time;
	clock_t clock_time;

	/**
	 * SymbolTable and variables to manipulate the insertion to symbol table
	 */
	SymbolTable s;
	bool popAtEndOfStatement = false;
	bool popTwice = false;

	int levels[5];

	extern char yytext[];
	extern string id;
	
	Tree AST;
	int AST_node_counter;
	int Label_counter;
	int Variable_counter;

	unique_ptr<Node> variableToInsert(new Node());
	unique_ptr<Node> functionToInsert(new Node());

	void outputReduction(const char *s);

	void yyerror(char const *msg);

	int yylex();

%}
%define parse.error verbose
%token AUTO_tok
%token BREAK_tok
%token CASE_tok
%token CHAR_tok
%token CONST_tok
%token CONTINUE_tok
%token DEFAULT_tok
%token DO_tok
%token DOUBLE_tok
%token ELSE_tok
%token ENUM_tok
%token EXTERN_tok
%token FLOAT_tok
%token FOR_tok
%token GOTO_tok
%token IF_tok
%token INT_tok
%token LONG_tok
%token REGISTER_tok
%token RETURN_tok
%token SHORT_tok
%token SIGNED_tok
%token SIZEOF_tok
%token STATIC_tok
%token STRUCT_tok
%token SWITCH_tok
%token TYPEDEF_tok
%token UNION_tok
%token UNSIGNED_tok
%token VOID_tok
%token VOLATILE_tok
%token WHILE_tok
%token ERROR_tok
%token ID_tok
%token PLUS_tok
%token MINUS_tok
%token STAR_tok
%token SEMI_tok
%token OPEN_BRACKET_tok
%token CLOSE_BRACKET_tok
%token EQUAL_tok
%token COLON_tok
%token COMMA_tok
%token OPEN_PAREN_tok
%token CLOSE_PAREN_tok
%token OPEN_BRACE_tok
%token CLOSE_BRACE_tok
%token QUESTION_MARK_tok
%token BAR_tok
%token CARET_tok
%token AMP_tok
%token GT_tok
%token LT_tok
%token PERCENT_tok
%token TILDA_tok
%token NOT_tok
%token INC_OP_tok
%token DEC_OP_tok
%token INTEGER_CONSTANT_tok
%token FLOATING_CONSTANT_tok

%token CHARACTER_CONSTANT_tok
%token ENUMERATION_CONSTANT_tok
%token STRING_LITERAL_tok

%token PTR_OP_tok
%token LEFT_OP_tok
%token RIGHT_OP_tok
%token LE_OP_tok
%token GE_OP_tok
%token EQ_OP_tok
%token NE_OP_tok
%token AND_OP_tok
%token OR_OP_tok
%token MULT_ASSIGN_tok
%token DIV_ASSIGN_tok
%token MOD_ASSIGN_tok
%token ADD_ASSIGN_tok
%token SUB_ASSIGN_tok
%token LEFT_ASSIGN_tok
%token RIGHT_ASSIGN_tok
%token AND_ASSIGN_tok
%token XOR_ASSIGN_tok
%token OR_ASSIGN_tok
%token TYPEDEF_NAME_tok
%token ELIPSIS_tok
%token DIV_tok
%token PERIOD_tok

%union
{
	int lint;
	char lchar;
	char* lstr;
	double ldoub;
	class Node* lnode;
	class TreeNode* tnode;
	
}

%right THEN
%right ELSE_tok

%start translation_unit
%%

translation_unit
	: {insert_lookup = 0;} external_declaration {
		TreeNode* tmp = new TreeNode(AST_node_counter, "translation_unit_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		AST.set_root(tmp);
		insert_lookup = 1;  outputReduction("translation_unit : external_declaration");}
	| translation_unit {insert_lookup = 0;} external_declaration {
		TreeNode* tmp = new TreeNode(AST_node_counter, "translation_unit_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		AST.set_root(tmp);
		insert_lookup = 1; outputReduction("translation_unit : translation_unit external_declaration");}
	;

external_declaration
	: function_definition {
		$<tnode>$ = $<tnode>1;
		outputReduction("external_declaration : function_definition");}
	| declaration {
		if (functionToInsert->name != "") {
			s.insert(functionToInsert->name, *functionToInsert);
		}
		$<tnode>$ = $<tnode>1;
		outputReduction("external_declaration : declaration");}
	;

function_definition
	: declarator compound_statement {
		TreeNode* tmp = new TreeNode(AST_node_counter, "function_definition_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("function_definition : declarator compound_statement");}
	| declarator   declaration_list {insert_lookup=1;}  compound_statement {
		TreeNode* tmp = new TreeNode(AST_node_counter, "function_definition_"+to_string(AST_node_counter),3);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		tmp->assignChild(2,$<tnode>4);
		$<tnode>$ = tmp;
		outputReduction("function_definition : declarator declaration_list compound_statement");}
	| declaration_specifiers declarator compound_statement {
		TreeNode* tmp = new TreeNode(AST_node_counter, "function_definition_"+to_string(AST_node_counter),3);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		tmp->assignChild(2,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("function_definition : declaration_specifiers declarator compound_statement");}
	| declaration_specifiers declarator   declaration_list {insert_lookup=1;} compound_statement {
		TreeNode* tmp = new TreeNode(AST_node_counter, "function_definition_"+to_string(AST_node_counter),4);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		tmp->assignChild(2,$<tnode>3);
		tmp->assignChild(3,$<tnode>5);
		$<tnode>$ = tmp;
		outputReduction("function_definition : declaration_specifiers declarator declaration_list compound_statement");}
	;

declaration
	: declaration_specifiers SEMI_tok {
		if (popAtEndOfStatement) {
			s.popBST();
			popAtEndOfStatement = false;
		}

		TreeNode* tmp = new TreeNode(AST_node_counter, "declaration_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		$<tnode>$ = tmp;
		outputReduction("declaration : declaration_specifiers SEMI_tok");}
	| declaration_specifiers init_declarator_list SEMI_tok {
		if (popAtEndOfStatement) {
			s.popBST();
			popAtEndOfStatement = false;
		}

		TreeNode* tmp = new TreeNode(AST_node_counter, "declaration_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("declaration : declaration_specifiers init_declarator_list SEMI_tok");}

declaration_list
	: {insert_lookup=0;} declaration {
		$<tnode>$ = $<tnode>2;
		insert_lookup = 1; outputReduction("declaration_list : declaration");}
	|  declaration_list {insert_lookup=0;} declaration {
		TreeNode* tmp = new TreeNode(AST_node_counter, "declaration_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		insert_lookup=1; outputReduction("declaration_list : declaration_list declaration");}
	;

declaration_specifiers
	: storage_class_specifier {
		$<tnode>$ = $<tnode>1;
		outputReduction("declaration_specifiers : storage_class_specifier");}
	| storage_class_specifier declaration_specifiers {
		TreeNode* tmp = new TreeNode(AST_node_counter, "declaration_specifiers_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("declaration_specifiers : storage_class_specifier declaration_specifiers");}
	| type_specifier {
		$<tnode>$ = $<tnode>1;
		outputReduction("declaration_specifiers : type_specifier");}
	| type_specifier declaration_specifiers {
		TreeNode* tmp = new TreeNode(AST_node_counter, "declaration_specifiers_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("declaration_specifiers : type_specifier declaration_specifiers");}
	| type_qualifier {
		$<tnode>$ = $<tnode>1;
		outputReduction("declaration_specifiers : type_qualifier");}
	| type_qualifier declaration_specifiers {
		TreeNode* tmp = new TreeNode(AST_node_counter, "declaration_specifiers_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("declaration_specifiers : type_qualifier declaration_specifiers");}
	;

storage_class_specifier
	: AUTO_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "storage_class_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(AUTO_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("storage_class_specifier : AUTO_tok");}
	| REGISTER_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "storage_class_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(REGISTER_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("storage_class_specifier : REGISTER_tok");}
	| STATIC_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "storage_class_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(STATIC_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("storage_class_specifier : STATIC_tok");}
	| EXTERN_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "storage_class_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(EXTERN_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("storage_class_specifier : EXTERN_tok");}
	| TYPEDEF_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "storage_class_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(TYPEDEF_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("storage_class_specifier : TYPEDEF_tok");}
	;

type_specifier
	: VOID_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(VOID_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_specifier : VOID_tok");}
	| CHAR_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(CHAR_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_specifier : CHAR_tok");}
	| SHORT_tok { 
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(SHORT_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_specifier : SHORT_tok");}
	| INT_tok { 
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(INT_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_specifier : INT_tok");}
	| LONG_tok { 
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(LONG_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_specifier : LONG_tok");}
	| FLOAT_tok { 
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(FLOAT_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_specifier : FLOAT_tok");}
	| DOUBLE_tok { 
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(DOUBLE_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_specifier : DOUBLE_tok");}
	| SIGNED_tok { 
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(SIGNED_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_specifier : SIGNED_tok");}
	| UNSIGNED_tok { 
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(UNSIGNED_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_specifier : UNSIGNED_tok");}
	| struct_or_union_specifier { 
		TreeNode* tmp = new TreeNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = $<tnode>1;
		outputReduction("type_specifier : struct_or_union_specifier");}
	| ENUM_tok { 
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(ENUM_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_specifier : ENUM_tok");}
	| TYPEDEF_NAME_tok { 
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_specifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->storeString(yylval.lstr);
		tmp->setTypeSpecifier(TYPEDEF_NAME_TYPE_NODE);
		tmp->notData();
		$<tnode>$ = tmp;
		outputReduction("type_specifier : TYPEDEF_NAME_tok");}
	;

type_qualifier
	: CONST_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_qualifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(CONST_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_qualifier : CONST_tok");}
	| VOLATILE_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "type_qualifier_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(VOLATILE_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("type_qualifier : VOLATILE_tok");}
	;

struct_or_union_specifier
	: struct_or_union identifier OPEN_BRACE_tok   struct_declaration_list   CLOSE_BRACE_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "struct_or_union_specifier_"+to_string(AST_node_counter),3);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		tmp->assignChild(2,$<tnode>4);
		$<tnode>$ = tmp;
		outputReduction("struct_or_union_specifier : struct_or_union identifier OPEN_BRACE_tok struct_declaration_list CLOSE_BRACE_tok");}
	| struct_or_union OPEN_BRACE_tok   struct_declaration_list   CLOSE_BRACE_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "struct_or_union_specifier_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("struct_or_union_specifier : struct_or_union OPEN_BRACE_tok struct_declaration_list CLOSE_BRACE_tok");}
	| struct_or_union identifier {
		TreeNode* tmp = new TreeNode(AST_node_counter, "struct_or_union_specifier_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("struct_or_union_specifier : struct_or_union identifier");}
	;

struct_or_union
	: STRUCT_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "struct_or_union_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(STRUCT_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("struct_or_union : STRUCT_tok");}
	| UNION_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "struct_or_union_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(UNION_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("struct_or_union : UNION_tok");}
	;

struct_declaration_list
	: struct_declaration {
		$<tnode>$ = $<tnode>1;
		outputReduction("struct_declaration_list : struct_declaration");}
	| struct_declaration_list struct_declaration {
		TreeNode* tmp = new TreeNode(AST_node_counter, "struct_declaration_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("struct_declaration_list : struct_declaration_list struct_declaration");}
	;

init_declarator_list
	: init_declarator {
		$<tnode>$ = $<tnode>1;
		outputReduction("init_declarator_list : init_declarator");}
	| init_declarator_list COMMA_tok init_declarator {
		TreeNode* tmp = new TreeNode(AST_node_counter, "init_declarator_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("init_declarator_list : init_declarator_list COMMA_tok init_declarator");}
	;

init_declarator
	: declarator {
		$<tnode>$ = $<tnode>1;
		outputReduction("init_declarator : declarator");}
	| declarator EQUAL_tok initializer {
		TreeNode* tmp = new TreeNode(AST_node_counter, "init_declarator_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("init_declarator : declarator EQUAL_tok initializer");}
	;

struct_declaration
	: specifier_qualifier_list struct_declarator_list SEMI_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "struct_declaration_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("struct_declaration : specifier_qualifier_list struct_declarator_list SEMI_tok");}
	;

specifier_qualifier_list
	: type_specifier {
		$<tnode>$ = $<tnode>1;
		outputReduction("specifier_qualifier_list : type_specifier");}
	| type_specifier specifier_qualifier_list {
		TreeNode* tmp = new TreeNode(AST_node_counter, "specifier_qualifier_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("specifier_qualifier_list : type_specifier specifier_qualifier_list");}
	| type_qualifier {
		$<tnode>$ = $<tnode>1;
		outputReduction("specifier_qualifier_list : type_qualifier");}
	| type_qualifier specifier_qualifier_list {
		TreeNode* tmp = new TreeNode(AST_node_counter, "specifier_qualifier_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("specifier_qualifier_list : type_qualifier specifier_qualifier_list");}
	;

struct_declarator_list
	: struct_declarator {
		$<tnode>$ = $<tnode>1;
		outputReduction("struct_declarator_list : struct_declarator");}
	| struct_declarator_list COMMA_tok struct_declarator {
		TreeNode* tmp = new TreeNode(AST_node_counter, "specifier_qualifier_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("struct_declarator_list : struct_declarator_list COMMA_tok struct_declarator");}
	;

struct_declarator
	: declarator {
		$<tnode>$ = $<tnode>1;
		outputReduction("struct_declarator : declarator");}
	| COLON_tok constant_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "struct_declarator_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("struct_declarator : COLON_tok constant_expression");}
	| declarator COLON_tok constant_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "struct_declarator_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("struct_declarator : declarator COLON_tok constant_expression");}
	;

/*
enum_specifier
	: ENUM_tok OPEN_BRACE_tok enumerator_list CLOSE_BRACE_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "enum_specifier_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("enum_specifier : ENUM_tok OPEN_BRACE_tok enumerator_list CLOSE_BRACE_tok");}
	| ENUM_tok identifier OPEN_BRACE_tok enumerator_list CLOSE_BRACE_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "enum_specifier_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		tmp->assignChild(1,$<tnode>4);
		$<tnode>$ = tmp;
		outputReduction("enum_specifier : ENUM_tok identifier OPEN_BRACE_tok enumerator_list CLOSE_BRACE_tok");}
	| ENUM_tok identifier {
		TreeNode* tmp = new TreeNode(AST_node_counter, "enum_specifier_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("enum_specifier : ENUM_tok identifier");}
	;

enumerator_list
	: enumerator {
		$<tnode>$ = $<tnode>1;
		outputReduction("enumerator_list : enumerator");}
	| enumerator_list COMMA_tok enumerator {
		TreeNode* tmp = new TreeNode(AST_node_counter, "enumerator_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("enumerator_list : enumerator_list COMMA_tok enumerator");}
	;

enumerator
	: identifier {
		$<tnode>$ = $<tnode>1;
		outputReduction("enumerator : identifier");}
	| identifier EQUAL_tok constant_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "enumerator_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("enumerator : identifier EQUAL_tok constant_expression");}
	;
*/

declarator
	: direct_declarator {
		if (insert_lookup == 0) {
			if (variableToInsert->name != "") {
				s.insert(variableToInsert->name, *variableToInsert);
			}
		}
		$<tnode>$ = $<tnode>1;
		outputReduction("declarator : direct_declarator");}
	| pointer direct_declarator {
		TreeNode* tmp = new TreeNode(AST_node_counter, "declarator_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("declarator :  pointer direct_declarator");}
	;

direct_declarator
	: identifier {
		$<tnode>$ = $<tnode>1;
		outputReduction("direct_declarator : identifier");}
	| OPEN_PAREN_tok declarator CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_declarator_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("direct_declarator : OPEN_PAREN_tok declarator CLOSE_PAREN_tok");}
	| direct_declarator OPEN_BRACKET_tok CLOSE_BRACKET_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_declarator_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		$<tnode>$ = tmp;
		outputReduction("direct_declarator : direct_declarator OPEN_BRACKET_tok CLOSE_BRACKET_tok");}
	| direct_declarator OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_declarator_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("direct_declarator : direct_declarator OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok");}
	| direct_declarator getTypes OPEN_PAREN_tok CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_declarator_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		$<tnode>$ = tmp;
		outputReduction("direct_declarator : direct_declarator OPEN_PAREN_tok CLOSE_PAREN_tok");}
	| direct_declarator getTypes OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_declarator_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>4);
		$<tnode>$ = tmp;
		outputReduction("direct_declarator : direct_declarator OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok");}
	| direct_declarator getTypes OPEN_PAREN_tok identifier_list CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_declarator_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>4);
		$<tnode>$ = tmp;
		outputReduction("direct_declarator : direct_declarator OPEN_PAREN_tok identifier_list CLOSE_PAREN_tok");}
	;

getTypes
	:	{
			
		}

pointer
	: STAR_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "pointer_"+to_string(AST_node_counter),ticket);
		++Variable_counter;
		++AST_node_counter;
		tmp->setTypeSpecifier(POINTER_TYPE_NODE);
		$<tnode>$ = tmp;
		outputReduction("pointer : STAR_tok");}
	| STAR_tok type_qualifier_list {
		TreeNode* tmp = new TreeNode(AST_node_counter, "pointer_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("pointer : STAR_tok type_qualifier_list");}
	| STAR_tok pointer {
		TreeNode* tmp = new TreeNode(AST_node_counter, "pointer_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("pointer : STAR_tok pointer");}
	| STAR_tok type_qualifier_list pointer {
		TreeNode* tmp = new TreeNode(AST_node_counter, "pointer_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("pointer : STAR_tok type_qualifier_list pointer");}
	;

type_qualifier_list
	: type_qualifier {
		$<tnode>$ = $<tnode>1;
		outputReduction("type_qualifier_list : type_qualifier");}
	| type_qualifier_list type_qualifier {
		TreeNode* tmp = new TreeNode(AST_node_counter, "type_qualifier_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("type_qualifier_list : type_qualifier_list type_qualifier");}
	;

parameter_type_list
	: push parameter_list {
		// variableToInsert.reset(new Node());
		$<tnode>$ = $<tnode>2;
		outputReduction("parameter_type_list : parameter_list");}
	| push parameter_list COMMA_tok ELIPSIS_tok {
		// variableToInsert.reset(new Node());
		TreeNode* tmp = new TreeNode(AST_node_counter, "parameter_type_list_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("parameter_type_list : parameter_list COMMA_tok ELIPSIS_tok");}
	;

parameter_list
	: parameter_declaration {
		$<tnode>$ = $<tnode>1;
		outputReduction("parameter_list : parameter_declaration");}
	| parameter_list COMMA_tok parameter_declaration {
		TreeNode* tmp = new TreeNode(AST_node_counter, "parameter_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("parameter_list : parameter_list COMMA_tok parameter_declaration");}
	;

parameter_declaration
	: declaration_specifiers declarator {
		// variableToInsert.reset(new Node());
		popTwice = true;

		TreeNode* tmp = new TreeNode(AST_node_counter, "parameter_declaration_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("parameter_declaration : declaration_specifiers declarator");}
	| declaration_specifiers {
		popAtEndOfStatement = true; // I don't know about this...

		$<tnode>$ = $<tnode>1;
		outputReduction("parameter_declaration : declaration_specifiers");}
	| declaration_specifiers abstract_declarator {
		TreeNode* tmp = new TreeNode(AST_node_counter, "parameter_declaration_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("parameter_declaration : declaration_specifiers abstract_declarator");}
	;

identifier_list
	: identifier {
		$<tnode>$ = $<tnode>1;
		outputReduction("identifier_list : identifier");}
	| identifier_list COMMA_tok identifier {
		TreeNode* tmp = new TreeNode(AST_node_counter, "identifier_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("identifier_list : identifier_list COMMA_tok identifier");}
	;

initializer
	: assignment_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("initializer : assignment_expression");}
	| OPEN_BRACE_tok initializer_list CLOSE_BRACE_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "initializer_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("initializer : OPEN_BRACE_tok initializer_list CLOSE_BRACE_tok");}
	| OPEN_BRACE_tok initializer_list COMMA_tok CLOSE_BRACE_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "initializer_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("initializer : OPEN_BRACE_tok initializer_list COMMA_tok CLOSE_BRACE_tok");}
	;

initializer_list
	: initializer {
		$<tnode>$ = $<tnode>1;
		outputReduction("initializer_list : initializer");}
	| initializer_list COMMA_tok initializer {
		TreeNode* tmp = new TreeNode(AST_node_counter, "initializer_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("initializer_list : initializer_list COMMA_tok initializer");}
	;

type_name
	: specifier_qualifier_list {
		$<tnode>$ = $<tnode>1;
		outputReduction("type_name : specifier_qualifier_list");}
	| specifier_qualifier_list abstract_declarator {
		TreeNode* tmp = new TreeNode(AST_node_counter, "type_name_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("type_name : specifier_qualifier_list abstract_declarator");}
	;

abstract_declarator
	: pointer {
		$<tnode>$ = $<tnode>1;
		outputReduction("abstract_declarator : pointer");}
	| direct_abstract_declarator {
		$<tnode>$ = $<tnode>1;
		outputReduction("abstract_declarator : direct_abstract_declarator");}
	| pointer direct_abstract_declarator {
		TreeNode* tmp = new TreeNode(AST_node_counter, "abstract_declarator_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("abstract_declarator : pointer direct_abstract_declarator");}
	;

direct_abstract_declarator
	: OPEN_PAREN_tok abstract_declarator CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_abstract_declarator_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("direct_abstract_declarator : OPEN_PAREN_tok abstract_declarator CLOSE_PAREN_tok");}
	| OPEN_BRACKET_tok CLOSE_BRACKET_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_abstract_declarator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("direct_abstract_declarator : OPEN_BRACKET_tok CLOSE_BRACKET_tok");}
	| OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_abstract_declarator_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("direct_abstract_declarator : OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok");}
	| direct_abstract_declarator OPEN_BRACKET_tok CLOSE_BRACKET_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_abstract_declarator_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		$<tnode>$ = tmp;
		outputReduction("direct_abstract_declarator : direct_abstract_declarator OPEN_BRACKET_tok CLOSE_BRACKET_tok");}
	| direct_abstract_declarator OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_abstract_declarator_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("direct_abstract_declarator : direct_abstract_declarator OPEN_BRACKET_tok constant_expression CLOSE_BRACKET_tok");}
	| OPEN_PAREN_tok CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_abstract_declarator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("direct_abstract_declarator : OPEN_PAREN_tok CLOSE_PAREN_tok");}
	| OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_abstract_declarator_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("direct_abstract_declarator : OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok");}
	| direct_abstract_declarator OPEN_PAREN_tok CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_abstract_declarator_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		$<tnode>$ = tmp;
		outputReduction("direct_abstract_declarator : direct_abstract_declarator OPEN_PAREN_tok CLOSE_PAREN_tok");}
	| direct_abstract_declarator OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "direct_abstract_declarator_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("direct_abstract_declarator : direct_abstract_declarator OPEN_PAREN_tok parameter_type_list CLOSE_PAREN_tok");}
	;

statement
	: labeled_statement {
		$<tnode>$ = $<tnode>1;
		outputReduction("statement : labeled_statement");}
	| compound_statement {
		$<tnode>$ = $<tnode>1;
		outputReduction("statement : compound_statement");}
	| expression_statement {
		$<tnode>$ = $<tnode>1;
		outputReduction("statement : expression_statement");}
	| selection_statement {
		$<tnode>$ = $<tnode>1;
		outputReduction("statement : selection_statement");}
	| iteration_statement {
		$<tnode>$ = $<tnode>1;
		outputReduction("statement : iteration_statement");}
	| jump_statement {
		$<tnode>$ = $<tnode>1;
		outputReduction("statement : jump_statement");}
	;

labeled_statement
	: identifier COLON_tok statement {
		int ticket = Label_counter;
		LabelNode* tmp = new LabelNode(AST_node_counter, "labeled_statement_"+to_string(AST_node_counter),ticket);
		++Label_counter;
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("labeled_statement : identifier COLON_tok statement");}
	| CASE_tok constant_expression COLON_tok statement {
		int ticket = Label_counter;
		LabelNode* tmp = new LabelNode(AST_node_counter, "labeled_statement_"+to_string(AST_node_counter),ticket);
		++Label_counter;
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		tmp->assignChild(1,$<tnode>4);
		$<tnode>$ = tmp;
		outputReduction("labeled_statement : CASE_tok constant_expression COLON_tok statement");}
	| DEFAULT_tok COLON_tok statement {
		int ticket = Variable_counter;
		DataNode* defaultString = new DataNode(AST_node_counter,"default_"+to_string(AST_node_counter),ticket);
		defaultString->storeString((char *)"default");
		++Variable_counter;
		++AST_node_counter;
		ticket = Label_counter;
		LabelNode* tmp = new LabelNode(AST_node_counter, "labeled_statement_"+to_string(AST_node_counter),ticket);
		++Label_counter;
		++AST_node_counter;
		tmp->assignChild(0,defaultString);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("labeled_statement : DEFAULT_tok COLON_tok statement");}
	;

expression_statement
	: SEMI_tok {
		outputReduction("expression_statement : SEMI_tok");}
	| expression SEMI_tok {
		$<tnode>$ = $<tnode>1;
		outputReduction("expression_statement : expression SEMI_tok");}
	;

push
	:	{ s.pushEmptyBST(); }
	;

pop
	:	{
			s.popBST();
			if (popTwice) {
				s.popBST();
				popTwice = false;
			}
		}

compound_statement
	: push OPEN_BRACE_tok CLOSE_BRACE_tok pop {
		TreeNode* tmp = new TreeNode(AST_node_counter, "compound_statement_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("compound_statement : OPEN_BRACE_tok CLOSE_BRACE_tok");}
	| push OPEN_BRACE_tok statement_list CLOSE_BRACE_tok pop {
		$<tnode>$ = $<tnode>3;
		outputReduction("compound_statement : OPEN_BRACE_tok statement_list CLOSE_BRACE_tok");}
	| push OPEN_BRACE_tok  declaration_list  CLOSE_BRACE_tok {
		$<tnode>$ = $<tnode>3;
		outputReduction("compound_statement : OPEN_BRACE_tok declaration_list CLOSE_BRACE_tok");}
	| push OPEN_BRACE_tok  declaration_list  statement_list CLOSE_BRACE_tok pop {
		TreeNode* tmp = new TreeNode(AST_node_counter, "compound_statement_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>3);
		tmp->assignChild(1,$<tnode>4);
		$<tnode>$ = tmp;
		outputReduction("compound_statement : OPEN_BRACE_tok declaration_list statement_list CLOSE_BRACE_tok");}
	;

statement_list
	: statement {
		$<tnode>$ = $<tnode>1;
		outputReduction("statement_list : statement");}
	| statement_list statement {
		TreeNode* tmp = new TreeNode(AST_node_counter, "statement_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("statement_list : statement_list statement");}
	;

selection_statement
	: IF_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement %prec THEN  {
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		SelectionNode* tmp = new SelectionNode(AST_node_counter, "selection_statement_"+to_string(AST_node_counter),2,false,ticket1,ticket2,-1);
		++Label_counter;
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>3);
		tmp->assignChild(1,$<tnode>5);
		$<tnode>$ = tmp;
		outputReduction("selection_statement : IF_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement");}
	| IF_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement ELSE_tok statement {
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		++Label_counter;
		int ticket3 = Label_counter;
		SelectionNode* tmp = new SelectionNode(AST_node_counter, "selection_statement_"+to_string(AST_node_counter),3,false,ticket1,ticket2,ticket3);
		++Label_counter;
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>3);
		tmp->assignChild(1,$<tnode>5);
		tmp->assignChild(2,$<tnode>7);
		$<tnode>$ = tmp;
		outputReduction("selection_statement : IF_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement ELSE_tok statement");}
	| SWITCH_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement {
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		SelectionNode* tmp = new SelectionNode(AST_node_counter, "selection_statement_"+to_string(AST_node_counter),2,true,ticket1,ticket2,-1);
		++Label_counter;
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>3);
		tmp->assignChild(1,$<tnode>5);
		$<tnode>$ = tmp;
		outputReduction("selection_statement : SWITCH_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement");}
	;

iteration_statement
	: WHILE_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement {
		EmptyNode* blank1 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		EmptyNode* blank2 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		Iter_statement* tmp = new Iter_statement(AST_node_counter, "iteration_statement_"+to_string(AST_node_counter),ticket1,ticket2,false);
		++AST_node_counter;
		++Label_counter;
		tmp->assignChild(0,blank1);
		tmp->assignChild(2,blank2);
		tmp->assignChild(1,$<tnode>3);
		tmp->assignChild(3,$<tnode>5);
		$<tnode>$ = tmp;
		outputReduction("iteration_statement : WHILE_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok statement");}
	| DO_tok statement WHILE_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok SEMI_tok {
		EmptyNode* blank1 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		EmptyNode* blank2 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		Iter_statement* tmp = new Iter_statement(AST_node_counter, "iteration_statement_"+to_string(AST_node_counter),ticket1,ticket2,true);
		++AST_node_counter;
		++Label_counter;
		tmp->assignChild(0,blank1);
		tmp->assignChild(2,blank2);
		tmp->assignChild(1,$<tnode>5);
		tmp->assignChild(3,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("iteration_statement : DO_tok statement WHILE_tok OPEN_PAREN_tok expression CLOSE_PAREN_tok SEMI_tok");}
	| FOR_tok OPEN_PAREN_tok SEMI_tok SEMI_tok CLOSE_PAREN_tok statement {
		EmptyNode* blank1 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		EmptyNode* blank2 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		EmptyNode* blank3 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		Iter_statement* tmp = new Iter_statement(AST_node_counter, "iteration_statement_"+to_string(AST_node_counter),ticket1,ticket2,false);
		++AST_node_counter;
		++Label_counter;
		tmp->assignChild(0,blank1);
		tmp->assignChild(2,blank2);
		tmp->assignChild(1,blank3);
		tmp->assignChild(3,$<tnode>6);
		$<tnode>$ = tmp;
		outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok SEMI_tok SEMI_tok CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok SEMI_tok SEMI_tok expression CLOSE_PAREN_tok statement {
		EmptyNode* blank1 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		EmptyNode* blank2 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		Iter_statement* tmp = new Iter_statement(AST_node_counter, "iteration_statement_"+to_string(AST_node_counter),ticket1,ticket2,false);
		++AST_node_counter;
		++Label_counter;
		tmp->assignChild(0,blank1);
		tmp->assignChild(1,blank2);
		tmp->assignChild(2,$<tnode>5);
		tmp->assignChild(3,$<tnode>7);
		$<tnode>$ = tmp;
		outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok SEMI_tok SEMI_tok expression CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok SEMI_tok expression SEMI_tok CLOSE_PAREN_tok statement {
		EmptyNode* blank1 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		EmptyNode* blank2 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		Iter_statement* tmp = new Iter_statement(AST_node_counter, "iteration_statement_"+to_string(AST_node_counter),ticket1,ticket2,false);
		++AST_node_counter;
		++Label_counter;
		tmp->assignChild(0,blank1);
		tmp->assignChild(2,blank2);
		tmp->assignChild(1,$<tnode>4);
		tmp->assignChild(3,$<tnode>7);
		$<tnode>$ = tmp;
		outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok SEMI_tok expression SEMI_tok CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok SEMI_tok expression SEMI_tok expression CLOSE_PAREN_tok statement {
		EmptyNode* blank1 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		Iter_statement* tmp = new Iter_statement(AST_node_counter, "iteration_statement_"+to_string(AST_node_counter),ticket1,ticket2,false);
		++AST_node_counter;
		++Label_counter;
		tmp->assignChild(0,blank1);
		tmp->assignChild(1,$<tnode>4);
		tmp->assignChild(2,$<tnode>6);
		tmp->assignChild(3,$<tnode>8);
		$<tnode>$ = tmp;
		outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok SEMI_tok expression SEMI_tok expression CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok expression SEMI_tok SEMI_tok CLOSE_PAREN_tok statement {
		EmptyNode* blank1 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		EmptyNode* blank2 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		Iter_statement* tmp = new Iter_statement(AST_node_counter, "iteration_statement_"+to_string(AST_node_counter),ticket1,ticket2,false);
		++AST_node_counter;
		++Label_counter;
		tmp->assignChild(1,blank1);
		tmp->assignChild(2,blank2);
		tmp->assignChild(0,$<tnode>3);
		tmp->assignChild(3,$<tnode>7);
		$<tnode>$ = tmp;
		outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok expression SEMI_tok SEMI_tok CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok expression SEMI_tok SEMI_tok expression CLOSE_PAREN_tok statement {
		EmptyNode* blank1 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		Iter_statement* tmp = new Iter_statement(AST_node_counter, "iteration_statement_"+to_string(AST_node_counter),ticket1,ticket2,false);
		++AST_node_counter;
		++Label_counter;
		tmp->assignChild(1,blank1);
		tmp->assignChild(0,$<tnode>3);
		tmp->assignChild(2,$<tnode>6);
		tmp->assignChild(3,$<tnode>8);
		$<tnode>$ = tmp;
		outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok expression SEMI_tok SEMI_tok expression CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok expression SEMI_tok expression SEMI_tok CLOSE_PAREN_tok statement {
		EmptyNode* blank1 = new EmptyNode(AST_node_counter,"empty_"+to_string(AST_node_counter));
		++AST_node_counter;
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		Iter_statement* tmp = new Iter_statement(AST_node_counter, "iteration_statement_"+to_string(AST_node_counter),ticket1,ticket2,false);
		++AST_node_counter;
		++Label_counter;
		tmp->assignChild(2,blank1);
		tmp->assignChild(0,$<tnode>3);
		tmp->assignChild(1,$<tnode>5);
		tmp->assignChild(3,$<tnode>8);
		$<tnode>$ = tmp;
		outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok expression SEMI_tok expression SEMI_tok CLOSE_PAREN_tok statement");}
	| FOR_tok OPEN_PAREN_tok expression SEMI_tok expression SEMI_tok expression CLOSE_PAREN_tok statement {
		int ticket1 = Label_counter;
		++Label_counter;
		int ticket2 = Label_counter;
		Iter_statement* tmp = new Iter_statement(AST_node_counter, "iteration_statement_"+to_string(AST_node_counter),ticket1,ticket2,false);
		++AST_node_counter;
		++Label_counter;
		tmp->assignChild(0,$<tnode>3);
		tmp->assignChild(1,$<tnode>5);
		tmp->assignChild(2,$<tnode>7);
		tmp->assignChild(3,$<tnode>9);
		$<tnode>$ = tmp;
		outputReduction("iteration_statement : FOR_tok OPEN_PAREN_tok expression SEMI_tok expression SEMI_tok expression CLOSE_PAREN_tok statement");}
	;

jump_statement
	: GOTO_tok {insert_lookup = 0;} identifier SEMI_tok {
		insert_lookup = 1;
		int ticket = Label_counter;
		JumpNode* tmp = new JumpNode(AST_node_counter, "jump_statement_"+to_string(AST_node_counter),ticket,0);
		++Label_counter;
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("jump_statement : GOTO_tok identifier SEMI_tok");}
	| CONTINUE_tok SEMI_tok {
		int ticket = Label_counter;
		JumpNode* tmp = new JumpNode(AST_node_counter, "jump_statement_"+to_string(AST_node_counter),ticket,1);
		++Label_counter;
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("jump_statement : CONTINUE_tok SEMI_tok");}
	| BREAK_tok SEMI_tok {
		int ticket = Label_counter;
		JumpNode* tmp = new JumpNode(AST_node_counter, "jump_statement_"+to_string(AST_node_counter),ticket,2);
		++Label_counter;
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("jump_statement : BREAK_tok SEMI_tok");}
	| RETURN_tok SEMI_tok {
		int ticket = Label_counter;
		JumpNode* tmp = new JumpNode(AST_node_counter, "jump_statement_"+to_string(AST_node_counter),ticket,3);
		++Label_counter;
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("jump_statement : RETURN_tok SEMI_tok");}
	| RETURN_tok expression SEMI_tok {
		int ticket = Label_counter;
		JumpNode* tmp = new JumpNode(AST_node_counter, "jump_statement_"+to_string(AST_node_counter),ticket,4);
		++Label_counter;
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("jump_statement : RETURN_tok expression SEMI_tok");}
	;

expression
	: assignment_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("expression : assignment_expression");}
	| expression COMMA_tok assignment_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("expression : expression COMMA_tok assignment_expression");}
	;

assignment_expression
	: conditional_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("assignment_expression : conditional_expression");}
	| unary_expression assignment_operator assignment_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_expression_"+to_string(AST_node_counter),3);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		tmp->assignChild(2,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("assignment_expression : unary_expression assignment_operator assignment_expression");}
	;

assignment_operator
	: EQUAL_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("assignment_operator : EQUAL_tok");}
	| MULT_ASSIGN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("assignment_operator : MULT_ASSIGN_tok");}
	| DIV_ASSIGN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("assignment_operator : DIV_ASSIGN_tok");}
	| MOD_ASSIGN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("assignment_operator : MOD_ASSIGN_tok");}
	| ADD_ASSIGN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("assignment_operator : ADD_ASSIGN_tok ");}
	| SUB_ASSIGN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("assignment_operator : SUB_ASSIGN_tok");}
	| LEFT_ASSIGN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("assignment_operator : LEFT_ASSIGN_tok");}
	| RIGHT_ASSIGN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("assignment_operator : RIGHT_ASSIGN_tok");}
	| AND_ASSIGN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("assignment_operator : AND_ASSIGN_tok");}
	| XOR_ASSIGN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("assignment_operator : XOR_ASSIGN_tok");}
	| OR_ASSIGN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("assignment_operator : OR_ASSIGN_tok");}
	;

conditional_expression
	: logical_or_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("conditional_expression : logical_or_expression");}
	| logical_or_expression QUESTION_MARK_tok expression COLON_tok conditional_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "assignment_expression_"+to_string(AST_node_counter),3);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		tmp->assignChild(2,$<tnode>5);
		$<tnode>$ = tmp;
		outputReduction("conditional_expression : logical_or_expression QUESTION_MARK_tok expression COLON_tok conditional_expression");}
	;

constant_expression
	: conditional_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("constant_expression : conditional_expression");}
	;

logical_or_expression
	: logical_and_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("logical_or_expression : logical_and_expression");}
	| logical_or_expression OR_OP_tok logical_and_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "logical_or_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("logical_or_expression : logical_or_expression OR_OP_tok logical_and_expression");}
	;

logical_and_expression
	: inclusive_or_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("logical_and_expression : inclusive_or_expression");}
	| logical_and_expression AND_OP_tok inclusive_or_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "logical_and_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("logical_and_expression : logical_and_expression AND_OP_tok inclusive_or_expression");}
	;

inclusive_or_expression
	: exclusive_or_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("inclusive_or_expression : exclusive_or_expression");}
	| inclusive_or_expression BAR_tok exclusive_or_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "inclusive_or_expression"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("inclusive_or_expression : inclusive_or_expression BAR_tok exclusive_or_expression");}
	;

exclusive_or_expression
	: and_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("exclusive_or_expression : and_expression ");}
	| exclusive_or_expression CARET_tok and_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "exclusive_or_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("exclusive_or_expression : exclusive_or_expression CARET_tok and_expression");}
	;

and_expression
	: equality_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("and_expression : equality_expression");}
	| and_expression AMP_tok equality_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "and_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("and_expression : and_expression AMP_tok equality_expression");}
	;

equality_expression
	: relational_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("equality_expression : relational_expression");}
	| equality_expression EQ_OP_tok relational_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "equality_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("equality_expression : equality_expression EQ_OP_tok relational_expression");}
	| equality_expression NE_OP_tok relational_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "equality_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("equality_expression : equality_expression NE_OP_tok relational_expression");}
	;

relational_expression
	: shift_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("relational_expression : shift_expression");}
	| relational_expression LT_tok shift_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "relational_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("relational_expression : relational_expression LT_tok shift_expression");}
	| relational_expression GT_tok shift_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "relational_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("relational_expression : relational_expression GT_tok shift_expression");}
	| relational_expression LE_OP_tok shift_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "relational_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("relational_expression : relational_expression LE_OP_tok shift_expression");}
	| relational_expression GE_OP_tok shift_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "relational_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("relational_expression : relational_expression GE_OP_tok shift_expression");}
	;

shift_expression
	: additive_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("shift_expression : additive_expression");}
	| shift_expression LEFT_OP_tok additive_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "shift_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("shift_expression : shift_expression LEFT_OP_tok additive_expression");}
	| shift_expression RIGHT_OP_tok additive_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "shift_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("shift_expression : shift_expression RIGHT_OP_tok additive_expression");}
	;

additive_expression
	: multiplicative_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("additive_expression : multiplicative_expression");}
	| additive_expression PLUS_tok multiplicative_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "additive_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("additive_expression : additive_expression PLUS_tok multiplicative_expression");}
	| additive_expression MINUS_tok multiplicative_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "additive_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("additive_expression : additive_expression MINUS_tok multiplicative_expression");}
	;

multiplicative_expression
	: cast_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("multiplicative_expression : cast_expression");}
	| multiplicative_expression STAR_tok cast_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "multiplicative_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("multiplicative_expression : multiplicative_expression STAR_tok cast_expression");}
	| multiplicative_expression DIV_tok cast_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "multiplicative_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("multiplicative_expression : multiplicative_expression DIV_tok cast_expression");}
	| multiplicative_expression PERCENT_tok cast_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "multiplicative_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("multiplicative_expression : multiplicative_expression PERCENT_tok cast_expression");}
	;

cast_expression
	: unary_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("cast_expression : unary_expression");}
	| OPEN_PAREN_tok type_name CLOSE_PAREN_tok cast_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "cast_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		tmp->assignChild(1,$<tnode>4);
		$<tnode>$ = tmp;
		outputReduction("cast_expression : OPEN_PAREN_tok type_name CLOSE_PAREN_tok cast_expression");}
	;

unary_expression
	: postfix_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("unary_expression : postfix_expression");}
	| INC_OP_tok unary_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "unary_expression_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("unary_expression : INC_OP_tok unary_expression");}
	| DEC_OP_tok unary_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "unary_expression_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("unary_expression : DEC_OP_tok unary_expression");}
	| unary_operator cast_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "unary_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("unary_expression : unary_operator cast_expression");}
	| SIZEOF_tok unary_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "unary_expression_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("unary_expression : SIZEOF_tok unary_expression");}
	| SIZEOF_tok OPEN_PAREN_tok type_name CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "unary_expression_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("unary_expression : SIZEOF_tok OPEN_PAREN_tok type_name CLOSE_PAREN_tok");}
	;

unary_operator
	: AMP_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "unary_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("unary_operator : AMP_tok");}
	| STAR_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "unary_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("unary_operator : STAR_tok");}
	| PLUS_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "unary_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("unary_operator : PLUS_tok");}
	| MINUS_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "unary_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("unary_operator : MINUS_tok");}
	| TILDA_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "unary_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("unary_operator : TILDA_tok");}
	| NOT_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "unary_operator_"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("unary_operator : NOT_tok");}
	;

postfix_expression
	: primary_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("postfix_expression : primary_expression");}
	| postfix_expression OPEN_BRACKET_tok expression CLOSE_BRACKET_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "postfix_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("postfix_expression : postfix_expression OPEN_BRACKET_tok expression CLOSE_BRACKET_tok");}
	| postfix_expression OPEN_PAREN_tok CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "postfix_expression_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		$<tnode>$ = tmp;
		outputReduction("postfix_expression : postfix_expression OPEN_PAREN_tok CLOSE_PAREN_tok");}
	| postfix_expression OPEN_PAREN_tok argument_expression_list CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "postfix_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("postfix_expression : postfix_expression OPEN_PAREN_tok argument_expression_list CLOSE_PAREN_tok");}
	| postfix_expression PERIOD_tok identifier {
		TreeNode* tmp = new TreeNode(AST_node_counter, "postfix_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("postfix_expression : postfix_expression PERIOD_tok identifier");}
	| postfix_expression PTR_OP_tok identifier {
		TreeNode* tmp = new TreeNode(AST_node_counter, "postfix_expression_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("postfix_expression : postfix_expression PTR_OP_tok identifier");}
	| postfix_expression INC_OP_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "postfix_expression_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		$<tnode>$ = tmp;
		outputReduction("postfix_expression : postfix_expression INC_OP_tok");}
	| postfix_expression DEC_OP_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "postfix_expression_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		$<tnode>$ = tmp;
		outputReduction("postfix_expression : postfix_expression DEC_OP_tok");}
	;

primary_expression
	: identifier {
		$<tnode>$ = $<tnode>1;
		outputReduction("primary_expression : identifier");}
	| constant {
		$<tnode>$ = $<tnode>1;
		outputReduction("primary_expression : constant");}
	| string {
		$<tnode>$ = $<tnode>1;
		outputReduction("primary_expression : string");}
	| OPEN_PAREN_tok expression CLOSE_PAREN_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "primary_expression_"+to_string(AST_node_counter),1);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>2);
		$<tnode>$ = tmp;
		outputReduction("primary_expression : OPEN_PAREN_tok expression CLOSE_PAREN_tok");}
	;

argument_expression_list
	: assignment_expression {
		$<tnode>$ = $<tnode>1;
		outputReduction("argument_expression_list : assignment_expression");}
	| argument_expression_list COMMA_tok assignment_expression {
		TreeNode* tmp = new TreeNode(AST_node_counter, "argument_expression_list_"+to_string(AST_node_counter),2);
		++AST_node_counter;
		tmp->assignChild(0,$<tnode>1);
		tmp->assignChild(1,$<tnode>3);
		$<tnode>$ = tmp;
		outputReduction("argument_expression_list : argument_expression_list COMMA_tok assignment_expression");}
	;

constant
	: INTEGER_CONSTANT_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "constant_"+to_string(AST_node_counter),ticket);
		tmp->storeInt(yylval.lint);
		++Variable_counter;
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("constant : INTEGER_CONSTANT_tok");}
	| CHARACTER_CONSTANT_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "constant_"+to_string(AST_node_counter),ticket);
		tmp->storeChar(yylval.lchar);
		++Variable_counter;
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("constant : CHARACTER_CONSTANT_tok");}
	| FLOATING_CONSTANT_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "constant"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("constant : FLOATING_CONSTANT_tok");}
	| ENUMERATION_CONSTANT_tok {
		TreeNode* tmp = new TreeNode(AST_node_counter, "constant"+to_string(AST_node_counter),0);
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("constant : ENUMERATION_CONSTANT_tok");}
	;

string
	: STRING_LITERAL_tok {
		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "string_"+to_string(AST_node_counter),ticket);
		tmp->storeString(yylval.lstr);
		++Variable_counter;
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("string : STRING_LITERAL_tok");}
	;

identifier
	: ID_tok {
		variableToInsert->name = id;

		int ticket = Variable_counter;
		DataNode* tmp = new DataNode(AST_node_counter, "identifier_"+to_string(AST_node_counter),ticket);
		if (yylval.lnode != NULL) {
			tmp->storeString((char*)yylval.lnode->name.c_str());
			tmp->setTypeSpecifier(ID_TYPE_NODE);
		}
		++Variable_counter;
		++AST_node_counter;
		$<tnode>$ = tmp;
		outputReduction("identifier : ID_tok");}
	;
%%

#include <stdio.h>
//#include "symboltable.h"
int lex_debug_level;
int symbol_table_debug;
int yacc_debug_level;
int c_line_lex_debug_level;
int c_line_symbol_table_debug;
int c_line_yacc_debug_level;

//SymbolTable s;
SymbolTable astTable;
//logName = "compilerLog.txt";


extern int column;
extern int line;
extern FILE* yyin;


int main(int argc, char **argv)
{
	//printf("Entered Main\n");
	int scan_count = 0;
	int lex_count = 0;
	int yacc_count = 0;
	insert_lookup = 0;

	Label_counter = 0;
	AST_node_counter = 0;
	Variable_counter = 0;
	
	lex_debug_level=1;
	symbol_table_debug=1;
	yacc_debug_level=1;
	c_line_symbol_table_debug =1;
	c_line_lex_debug_level=1;
	c_line_yacc_debug_level=1;
	
	
	
	levels[0] = 2;
	levels[1] = 3;
	levels[2] = 5;
	levels[3] = 7;
	levels[4] = 11;
	
	outfile = fopen("testCases/out.s","w");
	out_log = fopen(logName,"w");
	tokenFile = fopen("testCases/tokenFile.txt","w");
	parseFile = fopen("testCases/parseFile.txt","w");
	//productionFile = fopen("productionFile.txt","w");
	
	//printf("Created Log file\n");
	if(argc==1)
	{
		printf("No File Provided. Pass file in command line.");
	}
	else
	{
		if(!(yyin=fopen(argv[argc-1],"r")))
		{
			perror(argv[argc-1]);
			return(1);
		}
		file_name=argv[argc-1];
		errorText = fopen(argv[argc-1],"r");
		for(int i=argc-1; i>=1; i--)
		{
			if(argv[i][0]=='-' && argv[i][1]=='o')
			{
				fclose(parseFile);
				printf("%s\n",argv[i+1]);
				//outfile = fopen(argv[i+1],"w");
				parseFile = fopen(argv[i+1],"w");

			}
			if(argv[i][0]=='-' && argv[i][1]=='t')
			{
				fclose(tokenFile);
				printf("%s\n",argv[i+1]);
				tokenFile = fopen(argv[i+1],"w");

			}
			
			if(argv[i][0]=='-' && argv[i][1]=='a')
			{
				//todo
			}
			
			if(argv[i][0]=='-' && argv[i][1]=='q')
			{
				//todo
			}
			
			if(argv[i][0]=='-' && argv[i][1]=='S')
			{
				//todo
			}
			
			if(argv[i][0]=='-' && argv[i][1]=='l')
			{
				fclose(out_log);
				out_log = fopen(argv[i+1],"w");
				logName = argv[i+1];
			}
			if(argv[i][0]=='-' && argv[i][1]=='d')
			{
				for(int p = 2;argv[i][p]!='\0';p++)
				{
					switch(argv[i][p])
					{
						case 'l':
							lex_count+=1;
							if(lex_count <= 5)
							{
								c_line_lex_debug_level *= levels[lex_count-1];
							}
							break;
						case 's':
							scan_count+=1;
							if(scan_count <= 5)
							{
								c_line_symbol_table_debug *= levels[scan_count-1];
							}
							break;
						case 'p':
							yacc_count+=1;
							if(yacc_count <= 5)
							{
								c_line_yacc_debug_level*=levels[yacc_count-1];
							}
							if(yacc_count == 3)
							{
								yydebug=1;
							}
							break;
					}
				}
				//printf("Lex Count: %d, Scan Count: %d\n",lex_count,scan_count);
				//printf("Lex Debug level: %d\nYacc Debug level: %d\nScanner Debug level: %d\n",c_line_lex_debug_level,c_line_yacc_debug_level,c_line_symbol_table_debug);
				
				lex_debug_level = c_line_lex_debug_level;
				//printf("Debug lex level %d\n",lex_debug_level);
				symbol_table_debug = c_line_symbol_table_debug;
				//printf("Debug symbol_table level %d\n",symbol_table_debug);
				yacc_debug_level = c_line_yacc_debug_level;
				//printf("Debug yacc level %d\n",yacc_debug_level);
			}
			
			
		}
	}
	//int tok;
	
	//printf("Set commandline args\n");

	
	//printf("%d\n",lex_debug_level);
	

	//s.insert("KEY",Data);
	//s.pushEmptyBST();
	//s.popBST();
	//s.searchTop("KEY");//returns pointer to node
	//s.searchAll("KEY");//returns pointer
	//s.writeToFile();//dumps table to file
	//lex_debug_level = 1;
	//symbol_table_debug = 1;
	//yacc_debug_level = 1;
	yyparse();

	AST.tree_to_gv("graphs/default.gv");
	AST.tree_to_3ac("build/3ac.txt");
	//while((tok = yylex()))
	//{
	
		//printf("%d\n",tok);
	//}
	fclose(out_log);
	fclose(outfile);
	fclose(errorText);
	fclose(parseFile);
	fclose(tokenFile);
	return 0;	
}

//int main(int argc, char **argv)
//{
//	if(argc >=2)
//	{
//		if (atoi(argv[1])>=1){
//			yydebug = atoi(argv[1]);
//			printf("Debug level set %d\n",yydebug);
//		}
//	}
//	
//	yyparse();
//	return 0;
//}

void yyerror(char const *msg)
{
	char tmp[MAX_LINE_LENGTH];
	long int offset = ftell(errorText);
	fgets(tmp,sizeof tmp, errorText);
	fseek(errorText,offset,SEEK_SET);
	printf("ERROR: %s:Line: %d Column: %d %s\n",file_name,line,column,msg);
	printf("%s",tmp);
	for(int i = column; i>0;i--)
	{
		printf("-");
	}
	printf("^ \n\n");
	fprintf(stderr,"%s\n",msg);
	
	fprintf(out_log,"ERROR: %s:Line: %d Column: %d %s\n",file_name,line,column,msg);
	fprintf(out_log,"%s",tmp);
	for(int i = column; i>0;i--)
	{
		fprintf(out_log,"-");
	}
	fprintf(out_log,"^ \n\n");
}

void outputReduction(const char *production)
{	
	//fprintf(out_log, "%s", s);
	time_time = time(NULL);
	clock_time = clock();
	if(yacc_debug_level%2==0 || yacc_debug_level%3==0 || yacc_debug_level%5==0 || yacc_debug_level%7==0 )
	{
		fprintf(parseFile,"%s PARSER Time::%ld:%ld\t Line: %d\t",file_name, time_time,clock_time,line);
		printf("%s PARSER Time::%ld:%ld\t",file_name, time_time,clock_time);
	}
	//printf("%ld:%ld ",time_time,clock_time);

	if(yacc_debug_level%2==0)
	{
		fprintf(parseFile,"%s\n",production);
		printf("%s\n",production);
	}
	
}
