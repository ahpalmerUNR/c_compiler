digraph AST {
	translation_unit_52 -> external_declaration_51;
	external_declaration_51 -> function_definition_50;
	function_definition_50 -> declaration_specifiers_1;
	declaration_specifiers_1 -> type_specifier_0;
	type_specifier_0 [label="void"]
	function_definition_50 -> declarator_5;
	declarator_5 -> direct_declarator_4;
	direct_declarator_4 -> direct_declarator_3;
	direct_declarator_3 -> identifier_2;
	identifier_2 [label="main"]
	function_definition_50 -> compound_statement_49;
	compound_statement_49 -> declaration_list_14;
	declaration_list_14 -> declaration_13;
	declaration_13 -> declaration_specifiers_7;
	declaration_specifiers_7 -> type_specifier_6;
	type_specifier_6 [label="int"]
	declaration_13 -> init_declarator_list_12;
	init_declarator_list_12 -> init_declarator_11;
	init_declarator_11 -> declarator_10;
	declarator_10 -> direct_declarator_9;
	direct_declarator_9 -> identifier_8;
	identifier_8 [label="a"]
	compound_statement_49 -> statement_list_48;
	statement_list_48 -> statement_47;
	statement_47 -> expression_statement_46;
	expression_statement_46 -> expression_45;
	expression_45 -> assignment_expression_44;
	assignment_expression_44 -> unary_expression_18;
	unary_expression_18 -> postfix_expression_17;
	postfix_expression_17 -> primary_expression_16;
	primary_expression_16 -> identifier_15;
	identifier_15 [label="a"]
	assignment_expression_44 -> assignment_operator_19;
	assignment_expression_44 -> assignment_expression_43;
	assignment_expression_43 -> conditional_expression_42;
	conditional_expression_42 -> logical_or_expression_41;
	logical_or_expression_41 -> logical_and_expression_40;
	logical_and_expression_40 -> inclusive_or_expression39;
	inclusive_or_expression39 -> exclusive_or_expression_38;
	exclusive_or_expression_38 -> and_expression_37;
	and_expression_37 -> equality_expression_36;
	equality_expression_36 -> relational_expression_35;
	relational_expression_35 -> shift_expression_34;
	shift_expression_34 -> additive_expression_33;
	additive_expression_33 -> additive_expression_26;
	additive_expression_26 -> multiplicative_expression_25;
	multiplicative_expression_25 -> cast_expression_24;
	cast_expression_24 -> unary_expression_23;
	unary_expression_23 -> postfix_expression_22;
	postfix_expression_22 -> primary_expression_21;
	primary_expression_21 -> constant_20;
	constant_20 [label="5"]
	additive_expression_33 -> multiplicative_expression_32;
	multiplicative_expression_32 -> cast_expression_31;
	cast_expression_31 -> unary_expression_30;
	unary_expression_30 -> postfix_expression_29;
	postfix_expression_29 -> primary_expression_28;
	primary_expression_28 -> constant_27;
	constant_27 [label="3"]
}
