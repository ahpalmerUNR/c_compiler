digraph AST {
	translation_unit_57 -> translation_unit_6;
	translation_unit_6 -> function_definition_5;
	function_definition_5 [shape=doubleoctagon,color=red,label="printc"]
	function_definition_5 -> empty_3;
	empty_3 [style=filled,color=indigo,fontcolor=white]
	function_definition_5 -> identifier_0;
	identifier_0 [label="ID: printc"]
	function_definition_5 -> empty_4;
	empty_4 [style=filled,color=indigo,fontcolor=white]
	function_definition_5 -> compound_statement_2;
	translation_unit_57 -> function_definition_56;
	function_definition_56 [shape=doubleoctagon,color=red,label="main"]
	function_definition_56 -> declaration_specifiers_8;
	declaration_specifiers_8 [label="declaration_specifiers_8"]
	declaration_specifiers_8 -> type_specifier_7;
	type_specifier_7 [label="int"]
	function_definition_56 -> identifier_9;
	identifier_9 [label="ID: main"]
	function_definition_56 -> empty_55;
	empty_55 [style=filled,color=indigo,fontcolor=white]
	function_definition_56 -> compound_statement_54;
	compound_statement_54 -> declaration_14;
	declaration_14 [label="declaration_14"]
	declaration_14 -> declaration_specifiers_12;
	declaration_specifiers_12 [label="declaration_specifiers_12"]
	declaration_specifiers_12 -> type_specifier_11;
	type_specifier_11 [label="int"]
	declaration_14 -> identifier_13;
	identifier_13 [label="ID: i"]
	compound_statement_54 -> statement_list_53;
	statement_list_53 -> statement_list_50;
	statement_list_50 -> statement_list_41;
	statement_list_41 -> statement_list_33;
	statement_list_33 -> statement_list_27;
	statement_list_27 -> statement_list_19;
	statement_list_19 -> postfix_expression_16;
	postfix_expression_16 -> identifier_15;
	identifier_15 [label="ID: i"]
	statement_list_19 -> unary_expression_18;
	unary_expression_18 [label="++"]
	unary_expression_18 -> identifier_17;
	identifier_17 [label="ID: i"]
	statement_list_27 -> postfix_expression_26;
	postfix_expression_26 [label="  Left(Right)"]
	postfix_expression_26 -> identifier_20;
	identifier_20 [label="ID: i"]
	postfix_expression_26 -> argument_expression_list_25;
	argument_expression_list_25 [label="  Left , Right"]
	argument_expression_list_25 -> argument_expression_list_23;
	argument_expression_list_23 [label="  Left , Right"]
	argument_expression_list_23 -> constant_21;
	constant_21 [label="Int: 2"]
	argument_expression_list_23 -> constant_22;
	constant_22 [label="Int: 3"]
	argument_expression_list_25 -> constant_24;
	constant_24 [label="Int: 4"]
	statement_list_33 -> selection_statement_32;
	selection_statement_32 [shape=hexagon,color=green,label="switch"]
	selection_statement_32 -> constant_28;
	constant_28 [label="Int: 1"]
	selection_statement_32 -> labeled_statement_31;
	labeled_statement_31 [shape = box,color=blue,label="Label"]
	labeled_statement_31 -> constant_29;
	constant_29 [label="Int: 2"]
	labeled_statement_31 -> jump_statement_30;
	jump_statement_30 [shape = triangle,color=purple,label="break"]
	statement_list_41 -> selection_statement_40;
	selection_statement_40 [shape=diamond,color=green,label="if else"]
	selection_statement_40 -> constant_34;
	constant_34 [label="Int: 1"]
	selection_statement_40 -> assignment_expression_39;
	assignment_expression_39 [label="Int:  Left = Right"]
	assignment_expression_39 -> identifier_35;
	identifier_35 [label="ID: i"]
	assignment_expression_39 -> operator_expression_38;
	operator_expression_38 [label="Int:  Left + Right"]
	operator_expression_38 -> identifier_36;
	identifier_36 [label="ID: i"]
	operator_expression_38 -> constant_37;
	constant_37 [label="Int: 3"]
	statement_list_50 -> selection_statement_49;
	selection_statement_49 [shape=diamond,color=green,label="if else"]
	selection_statement_49 -> identifier_42;
	identifier_42 [label="ID: i"]
	selection_statement_49 -> assignment_expression_45;
	assignment_expression_45 [label="Int:  Left = Right"]
	assignment_expression_45 -> identifier_43;
	identifier_43 [label="ID: i"]
	assignment_expression_45 -> constant_44;
	constant_44 [label="Int: 2"]
	selection_statement_49 -> assignment_expression_48;
	assignment_expression_48 [label="Int:  Left = Right"]
	assignment_expression_48 -> identifier_46;
	identifier_46 [label="ID: i"]
	assignment_expression_48 -> constant_47;
	constant_47 [label="Int: 1"]
	statement_list_53 -> jump_statement_52;
	jump_statement_52 [shape = triangle,color=purple,label="return expr"]
	jump_statement_52 -> constant_51;
	constant_51 [label="Int: 0"]
}
